cmake_minimum_required (VERSION 2.8)
project (YARR)
set (YARR_VERSION_MAJOR 1)
set (YARR_VERSION_MINOR 0)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8)
        message(FATAL_ERROR "GCC version must be at least 4.8!")
    endif()
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.2)
        message(FATAL_ERROR "Clang version must be at least 3.2!")
    endif()
else()
    message(WARNING "You are using an unsupported compiler! Compilation has only been tested with Clang and GCC.")
endif()

if(CMAKE_BUILD_TYPE MATCHES Debug)
add_compile_options(-g)
else()
add_compile_options(-O4)
endif()
add_compile_options(-Wfatal-errors) 
add_compile_options(-Wno-deprecated)
add_compile_options(-std=c++11)

set(libs "")
#add libraries
file(GLOB libdirs lib[A-Z]*)
foreach(dir ${libdirs})
get_filename_component(name ${dir} NAME)
string(REPLACE "lib" "" libname ${name})
list(APPEND libs ${libname})
include_directories(${name}/include)
file(GLOB SrcFiles ${name}/*.cpp)
add_library(${libname} SHARED ${SrcFiles})
endforeach()

#add executables
file(GLOB tools tools/*.cpp)
foreach(target ${tools})
get_filename_component(execname ${target} NAME_WE)
get_filename_component(srcfile ${target} NAME)
add_executable(${execname} tools/${srcfile})
add_dependencies(${execname} ${libs})	   
target_link_libraries(${execname} ${libs} pthread ) 
endforeach()



